#!/bin/bash

echo "#############################################"
echo "#                                           #"
echo -e "\033[0;32m# Hemixyz Node miner hitasyurek tarafından hazırlanmıştır #\033[0m"
echo "#                                           #"
echo "#############################################"


# 3 saniye bekletir
sleep 3

ARCH=$(uname -m)  # İşletim sistemi mimarisini belirler

# Renkli metin çıktısı gösterir
show() {
    echo -e "\033[1;35m$1\033[0m"
}

# jq paketinin kurulu olup olmadığını kontrol eder, değilse kurar
if ! command -v jq &> /dev/null; then
    show "jq bulunamadı, kurulum yapılıyor..."
    sudo apt-get update
    sudo apt-get install -y jq > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        show "jq kurulamadı. Lütfen paket yöneticinizi kontrol edin."
        exit 1
    fi
fi


check_latest_version() {
    for i in {1..3}; do
        LATEST_VERSION=$(curl -s https://api.github.com/repos/hemilabs/heminetwork/releases/latest | jq -r '.tag_name')
        if [ -n "$LATEST_VERSION" ]; then
            show "Kullanılabilir son sürüm: $LATEST_VERSION"
            return 0
        fi
        sleep 2
    done

    exit 1
}

check_latest_version

# İndirme gereksinimini kontrol eder
download_required=true

if [ "$ARCH" == "x86_64" ]; then
    if [ -d "heminetwork_${LATEST_VERSION}_linux_amd64" ]; then
        show "x86_64 için son sürüm zaten indirilmiş. İndirme atlanıyor."
        cd "heminetwork_${LATEST_VERSION}_linux_amd64" || { show "Dizine geçiş başarısız oldu."; exit 1; }
        download_required=false  # İndirme gereksinimi yok olarak ayarlar
    fi
elif [ "$ARCH" == "arm64" ]; then
    if [ -d "heminetwork_${LATEST_VERSION}_linux_arm64" ]; then
        show "arm64 için son sürüm zaten indirilmiş. İndirme atlanıyor."
        cd "heminetwork_${LATEST_VERSION}_linux_arm64" || { show "Dizine geçiş başarısız oldu."; exit 1; }
        download_required=false  # İndirme gereksinimi yok olarak ayarlar
    fi
fi

if [ "$download_required" = true ]; then
    if [ "$ARCH" == "x86_64" ]; then
        show "x86_64 mimarisi için indirme yapılıyor..."
        wget --quiet --show-progress "https://github.com/hemilabs/heminetwork/releases/download/$LATEST_VERSION/heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz" -O "heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz"
        tar -xzf "heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz" > /dev/null
        cd "heminetwork_${LATEST_VERSION}_linux_amd64" || { show "Dizine geçiş başarısız oldu."; exit 1; }
    elif [ "$ARCH" == "arm64" ]; then
        show "arm64 mimarisi için indirme yapılıyor..."
        wget --quiet --show-progress "https://github.com/hemilabs/heminetwork/releases/download/$LATEST_VERSION/heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz" -O "heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz"
        tar -xzf "heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz" > /dev/null
        cd "heminetwork_${LATEST_VERSION}_linux_arm64" || { show "Dizine geçiş başarısız oldu."; exit 1; }
    else
        show "Desteklenmeyen mimari: $ARCH"
        exit 1
    fi
else
    show "Son sürüm zaten mevcut olduğundan indirme atlanıyor."
fi

echo
show "Tek bir seçenek belirleyin:"
show "1. PoP madenciliği için yeni cüzdan kullan"
show "2. PoP madenciliği için mevcut cüzdanı kullan"
read -p "Seçiminizi girin (1/2): " choice
echo

# Kullanıcı yeni cüzdan seçerse cüzdan oluşturur
if [ "$choice" == "1" ]; then
    show "Yeni cüzdan oluşturuluyor..."
    ./keygen -secp256k1 -json -net="testnet" > ~/popm-address.json
    if [ $? -ne 0 ]; then
        show "Cüzdan oluşturulamadı."
        exit 1
    fi
    cat ~/popm-address.json
    echo
    read -p "Yukarıdaki bilgileri kaydettiniz mi? (y/N): " saved
    echo
    if [[ "$saved" =~ ^[Yy]$ ]]; then
        pubkey_hash=$(jq -r '.pubkey_hash' ~/popm-address.json)
        show "Katıl: https://discord.gg/hemixyz"
        show "Faucet kanalından bu adrese fon isteyin: $pubkey_hash"
        echo
        read -p "Faucet isteğinde bulundunuz mu? (y/N): " faucet_requested
        if [[ "$faucet_requested" =~ ^[Yy]$ ]]; then
            priv_key=$(jq -r '.private_key' ~/popm-address.json)
            read -p "Sabit ücret girin (sadece sayı, önerilen: 100-200): " static_fee
            echo
        fi
    fi

# Kullanıcı mevcut cüzdanı seçerse özel anahtarı ve sabit ücreti girer
elif [ "$choice" == "2" ]; then
    read -p "Özel anahtarınızı girin: " priv_key
    read -p "Sabit ücret girin (sadece sayı, önerilen: 100-200): " static_fee
    echo
fi

# Hemi hizmetinin çalışıp çalışmadığını kontrol eder ve durdurur
if systemctl is-active --quiet hemi.service; then
    show "hemi.service şu anda çalışıyor. Durduruluyor ve devre dışı bırakılıyor..."
    sudo systemctl stop hemi.service
    sudo systemctl disable hemi.service
else
    show "hemi.service çalışmıyor."
fi

# Systemd hizmet dosyasını oluşturur ve başlatır
cat << EOF | sudo tee /etc/systemd/system/hemi.service > /dev/null
[Unit]
Description=Hemi Network popmd Service
After=network.target

[Service]
WorkingDirectory=$(pwd)
ExecStart=$(pwd)/popmd
Environment="POPM_BTC_PRIVKEY=$priv_key"
Environment="POPM_STATIC_FEE=$static_fee"
Environment="POPM_BFG_URL=wss://testnet.rpc.hemi.network/v1/ws/public"
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

# Systemd hizmetini yeniden yükler, etkinleştirir ve başlatır
sudo systemctl daemon-reload
sudo systemctl enable hemi.service
sudo systemctl start hemi.service
echo
show "PoP madenciliği başarıyla başlatıldı"
